{"version":3,"file":"static/js/820.d9330c63.chunk.js","mappings":"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","sources":["components/MySpinner.jsx","components/RegisterForm.jsx","pages/Register.jsx","utils/toasts.jsx"],"sourcesContent":["import { Spinner } from \"@chakra-ui/react\"\n\nfunction MySpinner() {\n  return (\n    <Spinner\n  thickness='4px'\n  speed='0.65s'\n  emptyColor='gray.200'\n  color='green.400'\n  size='xl'\n/>\n  )\n}\n\nexport default MySpinner","import { EmailIcon, Icon } from '@chakra-ui/icons';\nimport {\n  Button,\n  Heading,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Stack,\n  useToast,\n  Text,\n} from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { registerUser } from 'redux/auth/operations';\nimport { BsFillPersonFill } from 'react-icons/bs';\nimport { useNavigate } from 'react-router-dom';\nimport { registerFialure, registerSuccess } from 'utils/toasts';\nimport { getAuthInProgress } from 'redux/selectors';\nimport MySpinner from './MySpinner';\n\nfunction RegisterForm() {\n  const [show, setShow] = useState(false);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const dispatch = useDispatch();\n  const toast = useToast();\n  const navigate = useNavigate();\n  const authInProgress = useSelector(getAuthInProgress)\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(registerUser({ name, email, password }))\n      .unwrap()\n      .then(() => toast(registerSuccess))\n      .catch(() => toast(registerFialure));\n    setName('');\n    setEmail('');\n    setPassword('');\n    e.currentTarget.reset();\n  };\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      case 'name':\n        setName(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <Stack\n      as=\"form\"\n      spacing={4}\n      w={400}\n      mr=\"auto\"\n      ml=\"auto\"\n      onSubmit={handleSubmit}\n    >\n      {authInProgress && <MySpinner/>}\n      <Heading textAlign=\"center\" color=\"green.400\">\n        Register\n      </Heading>\n      <InputGroup>\n        <InputRightElement>\n          <Icon as={BsFillPersonFill} />\n        </InputRightElement>\n        <Input\n          placeholder=\"Enter your name\"\n          pr=\"4.5rem\"\n          name=\"name\"\n          type=\"text\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          onChange={handleInputChange}\n        />\n      </InputGroup>\n      <InputGroup>\n        <InputRightElement>\n          <EmailIcon />\n        </InputRightElement>\n        <Input\n          placeholder=\"Enter your email\"\n          pr=\"4.5rem\"\n          name=\"email\"\n          type=\"email\"\n          title=\"Email should contain @. For example, example@mail.com\"\n          onChange={handleInputChange}\n        />\n      </InputGroup>\n      <InputGroup size=\"md\">\n        <Input\n          pr=\"4.5rem\"\n          type={show ? 'text' : 'password'}\n          placeholder=\"Enter password\"\n          name=\"password\"\n          minLength={7}\n          onChange={handleInputChange}\n        />\n        <InputRightElement width=\"4.5rem\">\n          <Button h=\"1.75rem\" size=\"sm\" onClick={() => setShow(!show)}>\n            {show ? 'Hide' : 'Show'}\n          </Button>\n        </InputRightElement>\n      </InputGroup>\n      <Button type=\"submit\">Register now</Button>\n      <Text textAlign=\"center\">Already have an account?</Text>\n      <Button\n        borderColor=\"green.400\"\n        color=\"green.400\"\n        _hover={{\n          background: 'green.400',\n          color: 'white',\n        }}\n        variant=\"outline\"\n        onClick={() => navigate('/login')}\n      >\n        Log In\n      </Button>\n    </Stack>\n  );\n}\n\nexport default RegisterForm;\n","import RegisterForm from \"components/RegisterForm\";\n\nexport default function Register() {\n    return (\n        <RegisterForm/>\n    )\n}","export const logInSuccess = {\n    title: 'You logged in',\n    description: \"Now you can see your contacts\",\n    status: 'success',\n    duration: 3000,\n    isClosable: true,\n    position: 'top'\n  }\n\nexport const LogInFialure = {\n    title: 'Log in failure.',\n    description:'Check your email and password.',\n    status: 'error',\n    duration: 3000,\n    isClosable: true,\n    position: 'top',\n  }\n\n  export const registerFialure = {\n    title: 'Register failure.',\n    description:'Check your name, email and password.',\n    status: 'error',\n    duration: 3000,\n    isClosable: true,\n    position: 'top',\n  }\n\nexport const registerSuccess = {\n  title: 'Account created.',\n  description: \"We've created your account for you.\",\n  status: 'success',\n  duration: 3000,\n  isClosable: true,\n  position: 'top'\n}\n\nexport const addContactSuccess = {\n  title: 'Contact added.',\n          description: \"We've created your new contact\",\n            status: 'success',\n            duration: 3000,\n            isClosable: true,\n            position: 'top',\n}\n\nexport const addContactFailure = {\n  title: \"Failure.\",\n  description: \"Something went wrong. Try again later\",\n  status: 'error',\n  duration: 3000,\n  isClosable: true,\n  position: 'top',\n}"],"names":["thickness","speed","emptyColor","color","size","useState","show","setShow","name","setName","email","setEmail","password","setPassword","dispatch","useDispatch","toast","useToast","navigate","useNavigate","authInProgress","useSelector","getAuthInProgress","handleInputChange","e","currentTarget","value","as","spacing","w","mr","ml","onSubmit","preventDefault","registerUser","unwrap","then","registerSuccess","catch","registerFialure","reset","MySpinner","textAlign","BsFillPersonFill","I","placeholder","pr","type","pattern","title","onChange","minLength","width","h","onClick","borderColor","_hover","background","variant","Register","logInSuccess","description","status","duration","isClosable","position","LogInFialure","addContactSuccess","addContactFailure"],"sourceRoot":""}